{"version":3,"sources":["App/App.styled.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.styled.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Title/Title.styled.js","components/Title/Title.js","App/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["Main","styled","main","Section","section","MainTitle","h1","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","axios","defaults","baseURL","Form","form","Label","label","Input","input","Button","button","getFilter","state","contacts","filter","getContacts","items","getAllContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","useState","setName","number","setNumber","nameId","uuidv4","telId","dispatch","useDispatch","useSelector","handleChange","evt","currentTarget","value","resetForm","onSubmit","preventDefault","existingName","find","toast","info","checkContact","id","contactsActions","post","then","data","catch","error","addContact","htmlFor","type","onChange","pattern","title","placeholder","required","List","ul","Item","li","ContactList","useEffect","a","get","map","onClick","delete","removeContact","Filter","e","h2","Title","App","itemReducer","createReducer","action","payload","item","filterReducer","rootReducer","combineReducers","store","configureStore","reducer","devtools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAEaA,EAAOC,IAAOC,KAAV,qPAYJC,EAAUF,IAAOG,QAAV,sDAGPC,EAAYJ,IAAOK,GAAV,qH,yECfTC,EAAsBC,YAAa,gCACnCC,EAAsBD,YAAa,gCACnCE,EAAoBF,YAAa,8BAEjCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAClC,iCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAElCS,EAAiBT,YAAa,mBCb3CU,IAAMC,SAASC,QAAU,8CAElB,I,cCLMC,EAAOpB,IAAOqB,KAAV,4BAGJC,EAAQtB,IAAOuB,MAAV,0GAOLC,EAAQxB,IAAOyB,MAAV,mMAYLC,EAAS1B,IAAO2B,OAAV,wR,QCtBNC,EAAY,SAACC,GAAD,OAAWA,EAAMC,SAASC,QACtCC,EAAc,SAACH,GAAD,OAAWA,EAAMC,SAASG,OAExCC,EAAiBC,YAC5B,CAACH,EAAaJ,IACd,SAACE,EAAUC,GACT,OAAOD,EAASC,QACd,SAACK,GAAD,OACEA,EAAQC,KAAKC,cAAcC,SAASR,EAAOO,qB,OCD5C,SAASE,IACd,MAAwBC,mBAAS,IAAjC,mBAAOJ,EAAP,KAAaK,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACMC,EAASC,cACTC,EAAQD,cACRE,EAAWC,cACXnB,EAAWoB,YAAYlB,GAavBmB,EAAe,SAACC,GACpB,MAAwBA,EAAIC,cAApBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACd,OAAQjB,GACN,IAAK,OACHK,EAAQY,GACR,MAEF,IAAK,SACHV,EAAUU,GACV,MAEF,QACE,SAcCC,EAAY,WACjBb,EAAQ,IACRE,EAAU,KAEZ,OACI,eAACxB,EAAD,CAAMoC,SAfa,SAACJ,GACpBA,EAAIK,iBA3Ba,SAAC3B,EAAUO,GAC9B,IAAMqB,EAAe5B,EAAS6B,MAC1B,SAACvB,GAAD,OAAaA,EAAQC,KAAKC,gBAAkBD,EAAKC,iBAErD,GAAIoB,EAEA,OADAE,IAAMC,KAAK,yCACJH,EAsBaI,CAAahC,EAAUO,KAI7CW,EHjCoB,SAAC,GAAD,IAAGX,EAAH,EAAGA,KAAMM,EAAT,EAASA,OAAT,OAAsB,SAAAK,GAC5C,IAAMZ,EAAU,CAChB2B,GAAIjB,cACJT,OACAM,UAGFK,EAASgB,KAET/C,IACGgD,KAAK,YAAa7B,GAClB8B,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcnB,EAASgB,EAAkCG,OAC9DC,OAAM,SAAAC,GAAK,OAAIrB,EAASgB,EAAgCK,QGqB9CC,CAAW,CAACjC,OAAMM,YAC3BY,MAQA,UACE,eAACjC,EAAD,CAAOiD,QAAS1B,EAAhB,kBACE,cAACrB,EAAD,CACEuC,GAAIlB,EACJ2B,KAAK,OACLnC,KAAK,OACLiB,MAAOjB,EACPoC,SAAUtB,EACVuB,QAAQ,yHACRC,MAAM,kcACNC,YAAY,qBACZC,UAAQ,OAIZ,eAACvD,EAAD,CAAOiD,QAASxB,EAAhB,0BACE,cAACvB,EAAD,CACEuC,GAAIhB,EACJyB,KAAK,MACLnC,KAAK,SACLiB,MAAOX,EACP8B,SAAUtB,EACVuB,QAAQ,yFACRC,MAAM,6iBACNC,YAAY,qBACZC,UAAQ,OAIZ,cAACnD,EAAD,CAAQ8C,KAAK,SAAb,4BCtFD,IAAMM,EAAO9E,IAAO+E,GAAV,sFAOJC,EAAOhF,IAAOiF,GAAV,6IASJvD,GAAS1B,IAAO2B,OAAV,uRCXZ,SAASuD,KACZ,IAAMlC,EAAWC,cAEjBkC,qBAAU,WACNnC,ELJqB,uCAAM,WAAMA,GAAN,iBAAAoC,EAAA,6DACjCpC,EAASgB,KADwB,kBAGN/C,IAAMoE,IAAI,aAHJ,gBAGrBlB,EAHqB,EAGrBA,KACRnB,EAASgB,EAAoCG,IAJhB,gDAM/BnB,EAASgB,EAAA,OANsB,yDAAN,yDKKtB,CAAChB,IAEJ,IAAMlB,EAAWoB,YAAYhB,GAE7B,OACI,cAAC4C,EAAD,UACKhD,EAASwD,KAAI,gBAAGvB,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAMM,EAAb,EAAaA,OAAb,OACV,eAACqC,EAAD,WACK3C,EADL,KACaM,EACT,cAAC,GAAD,CAAQ4C,QAAS,kBAAMvC,ELWd,SAAAe,GAAE,OAAI,SAAAf,GACjCA,EAASgB,KACT/C,IACGuE,OADH,oBACuBzB,IACpBG,MAAK,kBAAMlB,EAASgB,EAAqCD,OACzDK,OAAM,SAAAC,GAAK,OAAIrB,EAASgB,EAAmCK,QKhBZoB,CAAc1B,KAA9C,sBAFOA,Q,aCjBpB,I,GAAMvC,GAAK,4MAYLF,GAAK,uICRX,SAASoE,KACZ,IAAMpC,EAAQJ,YAAYtB,GACpBoB,EAAWC,cACjB,OACI,eAAC,GAAD,mCACI,cAAC,GAAD,CACIuB,KAAK,OACLlB,MAAOA,EACPmB,SAAU,SAACkB,GAAD,OAAO3C,EAAShC,EAAe2E,EAAEtC,cAAcC,SACzDsB,YAAY,0BCbrB,IAAMxE,GAAYJ,IAAO4F,GAAV,uHCCf,SAASC,GAAT,GAA2B,IAAVlB,EAAS,EAATA,MACpB,OACK,cAAC,GAAD,UAAYA,ICEN,SAASmB,KAEtB,OACE,qCACE,cAAC1F,EAAD,wBACA,eAACL,EAAD,WACE,eAACG,EAAD,WACE,cAAC2F,GAAD,CAAOlB,MAAO,gBACd,cAACnC,EAAD,OAEF,eAACtC,EAAD,WACE,cAAC2F,GAAD,CAAOlB,MAAM,mBACb,cAACe,GAAD,OAEF,eAACxF,EAAD,WACE,cAAC2F,GAAD,CAAOlB,MAAM,aACb,cAACO,GAAD,UAGJ,cAAC,IAAD,O,iCCNAa,GAAcC,YAAc,IAAD,sBAC5BhC,GAjBc,SAACnC,EAAOoE,GACvB,OAAOA,EAAOC,WAee,gBAE5BlC,GAdW,SAACnC,EAAOoE,GACpB,MAAM,CAAEA,EAAOC,SAAf,oBAA2BrE,OAWE,gBAG5BmC,GAXc,SAACnC,EAAOoE,GAEvB,OADiBpE,EAAME,QAAO,SAAAoE,GAAI,OAAIA,EAAKpC,KAAOkC,EAAOC,cAO5B,KAM3BE,GAAgBJ,YAAc,GAAD,gBAChChC,GAVgB,SAACnC,EAAOoE,GACvB,OAAOA,EAAOC,YAiBHG,GALKC,aAAgB,CAChCrE,MAAO8D,GACPhE,OAAQqE,KCvBGG,GANDC,YAAe,CACzBC,QAAS,CACL3E,SAAUuE,IAEdK,UAAUC,ICAdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAASA,GAAnB,SACE,cAACT,GAAD,QAGJiB,SAASC,eAAe,W","file":"static/js/main.f33ee4f0.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Main = styled.main`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\ntext-align: center;\nmargin: 20px auto;\npadding: 20px;\nbackground-color: #fff;\nwidth: 1000px;\nbox-shadow: 0px 0px 8px 0px rgba(34, 60, 80, 0.2);\n`;\n\nexport const Section = styled.section`\n  /* padding: 40px 0; */\n`;\nexport const MainTitle = styled.h1`\n  text-align: center;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  color: #9e1878;\n`;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction(\"contacts/filter\");\n","import axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as contactsActions from '../contacts/contacts-actions.js';\n\n// axios.defaults.baseURL = 'http://localhost:7777';\naxios.defaults.baseURL = 'https://6120f07524d11c001762ee9f.mockapi.io';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactRequest());\n  try {\n      const { data } = await axios.get('/contacts');\n      dispatch(contactsActions.fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactError(error));\n  }\n};\n\nexport const addContact = ({ name, number }) => dispatch => {\n    const contact = {\n    id: uuidv4(),\n    name,\n    number,\n  };\n\n  dispatch(contactsActions.addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\n    .catch(error => dispatch(contactsActions.addContactError(error)));\n};\n\nexport const removeContact = id => dispatch => {\n  dispatch(contactsActions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\n    .catch(error => dispatch(contactsActions.deleteContactError(error)));\n};","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\nwidth: 400px;\nmargin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\nheight: 40px;\nborder: 1px solid #ff0d82;\nborder-radius: 4px;\nfont-size: 16px;\nmargin-top: 10px;\n&:focus {\n    outline: none;\n    border: 1px solid #9e1878;\n}\n`;\n\nexport const Button = styled.button`\n  min-width: 100px;\n  height: 30px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  color: #fff;\n  text-transform: uppercase;\n  background-color: #ff0d82;\n  box-shadow: 0px 0px 8px 0px rgba(34, 60, 80, 0.2);\n  border: none;\n  \n`;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getFilter = (state) => state.contacts.filter;\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getAllContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { Form, Label, Input, Button } from \"./ContactForm.styled\";\nimport { getContacts } from '../../redux/contacts/contacts-selectors'\n\nexport function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const nameId = uuidv4();\n  const telId = uuidv4();\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n\n  const checkContact = (contacts, name) => {\n    const existingName = contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (existingName) {\n        toast.info('Contact with such name already exists');\n        return existingName\n    }\n  };\n  \n  const handleChange = (evt) => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n    };\n    \n    const handleSubmit = (evt) => {\n      evt.preventDefault();\n      const duplicateName = checkContact(contacts, name)\n      if (duplicateName) {\n        return\n      }\n      dispatch(addContact({name, number}))\n      resetForm();\n   };\n\n   const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n   };\n  return (\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor={nameId}> Name\n          <Input\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            placeholder=\"Enter contact name\"\n            required\n          />\n        </Label>\n\n        <Label htmlFor={telId}> Phone Number\n          <Input\n            id={telId}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            placeholder=\"Enter phone number\"\n            required\n          />\n        </Label>\n\n        <Button type=\"submit\">\n          Add contact\n        </Button>\n      </Form>\n    );\n}","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\nwidth: 800px;\n\n`;\n\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nmargin-bottom: 25px;\nfont-size: 24px;\n\n`;\n\nexport const Button = styled.button`\n  min-width: 100px;\n  height: 30px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  color: #fff;\n  text-transform: uppercase;\n  background-color: #ff0d82;\n  box-shadow: 0px 0px 8px 0px rgba(34, 60, 80, 0.2);\n  border: none;\n \n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { List, Item, Button } from \"./ContactList.styled\";\nimport { removeContact, fetchContacts } from \"../../redux/contacts/contacts-operations\";\nimport { getAllContacts } from \"../../redux/contacts/contacts-selectors\";\n\n\nexport function ContactList() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const contacts = useSelector(getAllContacts);\n\n    return (\n        <List>\n            {contacts.map(({ id, name, number }) => (\n                <Item key={id}>\n                    {name}: {number}\n                    <Button onClick={() => dispatch(removeContact(id))}>\n                        Delete\n                    </Button>\n                </Item>\n            ))}\n        </List>\n    )\n}\n\n","import styled from \"@emotion/styled/macro\";\n\nexport const Input = styled.input`\n  border: 1px solid #ff0d82;\n  border-radius: 4px;\n  font-size: 16px;\n  height: 40px;\n  margin-top: 10px;\n  &:focus {\n      outline: none;\n      border: 1px solid #9e1878;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  margin-bottom: 20px;\n\n`;","// import PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input } from \"./Filter.styled\";\nimport { filterContacts } from \"../../redux/contacts/contacts-actions\";\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nexport function Filter() {\n    const value = useSelector(getFilter);\n    const dispatch = useDispatch();\n    return (\n        <Label>Find contacts by name\n            <Input\n                type=\"text\"\n                value={value}\n                onChange={(e) => dispatch(filterContacts(e.currentTarget.value))}\n                placeholder=\"Enter contact name\"/>\n        </Label>\n    )\n}\n\n// Filter.propTypes = {\n//     filterValue: PropTypes.string,\n//     onChange: PropTypes.func,\n// }\n\n// export default Filter;","import styled from \"@emotion/styled\";\n\nexport const MainTitle = styled.h2`\n  text-align: center;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  color: #9e1878;\n`;","import PropTypes from \"prop-types\";\nimport { MainTitle } from \"./Title.styled\";\n\nexport function Title({ title }) {\n    return (\n         <MainTitle>{title}</MainTitle>\n    )\n}\n\nTitle.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n\n","import { ToastContainer } from 'react-toastify';\nimport { Main, Section, MainTitle } from './App.styled';\nimport { ContactForm } from \"../components/ContactForm/ContactForm\";\nimport { ContactList } from \"../components/ContactList/ContactList\";\nimport { Filter } from \"../components/Filter/Filter\";\nimport { Title } from \"../components/Title/Title\";\n\nexport default function App() {\n\n  return (\n    <>\n      <MainTitle>Phonebook</MainTitle>\n      <Main>\n        <Section>\n          <Title title={\"Add contact\"} />\n          <ContactForm/>\n        </Section>\n        <Section>\n          <Title title=\"Search contact\" />\n          <Filter />\n        </Section>\n        <Section>\n          <Title title=\"Contacts\"/>\n          <ContactList />\n        </Section>\n      </Main>\n      <ToastContainer />\n      </>\n  )\n}\n\n\n\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as contactsActions from '../contacts/contacts-actions.js';\n\nconst fetchItems = (state, action) => {\n    return action.payload\n};\n\nconst addItem = (state, action) => {\n    return [action.payload, ...state];\n};\n\nconst removeItem = (state, action) => {\n    const contacts = state.filter(item => item.id !== action.payload);\n    return contacts\n};\n\nconst filterItem = (state, action) => {\n    return action.payload;\n};\nconst itemReducer = createReducer([], {\n    [contactsActions.fetchContactSuccess]: fetchItems,\n    [contactsActions.addContactSuccess]: addItem,\n    [contactsActions.deleteContactSuccess]: removeItem,\n});\n\nconst filterReducer = createReducer('', {\n  [contactsActions.filterContacts]: filterItem,\n});\n\nconst rootReducer = combineReducers({\n    items: itemReducer,\n    filter: filterReducer,\n    }\n);\nexport default rootReducer","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./contacts/contacts-reducer\";\n\nconst store = configureStore({\n    reducer: {\n        contacts: rootReducer\n    },\n    devtools: process.env.NODE_ENV !== 'production'\n})\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}